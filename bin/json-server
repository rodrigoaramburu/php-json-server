#!/usr/bin/env php
<?php

use Minicli\App;
use JsonServer\Utils\Reader;
use JsonServer\Utils\Question;
use JsonServer\Utils\TagFilter;
use Minicli\Exception\CommandNotFoundException;

if (php_sapi_name() !== 'cli') {
    exit;
}

$vendorPath = dirname(__DIR__, 4) . '/vendor/autoload.php';
$localPath = dirname(__DIR__) . '/vendor/autoload.php';

if (file_exists($vendorPath)) {
    include_once $vendorPath;
    $autoloadPath = $vendorPath;
    $root_app = dirname($autoloadPath, 2) . '/vendor/rodrigoaramburu/php-json-server/';
    $command_path = dirname($autoloadPath, 2) . '/vendor/rodrigoaramburu/php-json-server/src/Command';
} else {
    include_once $localPath;
    $autoloadPath = $localPath;
    $root_app = dirname($autoloadPath, 2);
    $command_path = $root_app . '/src/Command';
}

$app = new App([
    'app_path' => $command_path
]);
$app->addService('question', new Question());
$app->getPrinter()->registerFilter(new TagFilter());

$argv[] = 'root_package='.$root_app;

$app->setSignature('json-server help');

try {
    $app->runCommand($argv);
} catch (CommandNotFoundException $notFoundException) {
    $app->getPrinter()->error("Command Not Found.");
    return 1;
} catch (Exception $exception) {
    if ($app->config->debug) {
        $app->getPrinter()->error("An error occurred:");
        $app->getPrinter()->error($exception->getMessage());
    }
    return 1;
}

return 0;

